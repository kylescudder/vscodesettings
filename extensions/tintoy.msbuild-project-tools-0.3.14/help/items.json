{
    "*": {
        "description": "Well-known item metadata common to all (or most) item types.",
        "metadata": {
            "Identity": "The item specified in the Include attribute.",
            "RootDir": "Contains the root directory of the item.",
            "Filename": "Contains the file name of the item, without the extension.",
            "Extension": "Contains the file name extension of the item.",
            "RelativeDir": "Contains the path specified in the Include attribute, up to the final slash or backslash.",
            "Directory": "Contains the directory of the item, without the root directory.",
            "RecursiveDir": "If the Include attribute contains the wildcard **, this metadata specifies the part of the path that replaces the wildcard.",
            "ModifiedTime": "Contains the timestamp from the last time the item was modified.",
            "FullPath": "Contains the full path of the item.",
            "CreatedTime": "Contains the timestamp from the last time the item was created.",
            "AccessedTime": "Contains the timestamp from the last time the item was last accessed.",
            "CopyToOutputDirectory": "Copy the item to the output directory (boolean, default false).",
            "CustomToolNamespace": "The namespace for code generated by the custom tool associated with the item.",
            "DependentUpon": "Indicates that the item is dependent upon another item.",
            "SubType": "The item sub-type.",
            "Generator": "Name of any file generator that is run on this item.",
            "Visible": "Display in the item in the user interface? (optional, boolean)"
        }
    },
    "Analyzer": {
        "description": "An assembly containing diagnostic analyzers"
    },
    "ApplicationDefinition": {
        "description": "XAML file that contains the application definition, only one can be defined"
    },
    "AppxHashUri": {
        "description": "Hash algorithm URI.",
        "metadata": {
            "Id": "Hash algorithm ID corresponding to given hash URI."
        }
    },
    "AppxManifest": {
        "description": "app manifest template"
    },
    "AppxManifestFileNameQuery": {
        "description": "XPath queries used to extract file names from the app manifest."
    },
    "AppxManifestImageFileNameQuery": {
        "description": "XPath queries used to define image files in the app manifest and restrictions on them.",
        "metadata": {
            "DescriptionID": "ID of description string resource describing this type of the image.",
            "ExpectedScaleDimensions": "Semicolon-delimited list of expected scale dimensions in format '{scale}:{width}x{height}'.",
            "ExpectedTargetSizes": "Semicolon-delimited list of expected target sizes.",
            "MaximumFileSize": "Maximum file size in bytes."
        }
    },
    "AppxManifestMetadata": {
        "description": "App manifest metadata item. Can be a literal, or it can be a path to a binary to extract version from.",
        "metadata": {
            "Name": "Name of app manifest metadata to insert into manifest.",
            "Value": "Literal value of app manifest metadata to insert into manifest.",
            "Version": "Version to be inserted as a value of app manifest metadata to insert into manifest."
        }
    },
    "AppxManifestSchema": {
        "description": "App manifest schema file."
    },
    "AppxReservedFileName": {
        "description": "Reserved file name which cannot appear in the app package."
    },
    "AppxSystemBinary": {
        "description": "Name of any file which is present on the machine and should not be part of the app payload."
    },
    "BaseApplicationManifest": {
        "description": "The base application manifest for the build. Contains ClickOnce security information."
    },
    "CodeAnalysisDependentAssemblyPaths": {
        "description": "Additional reference assembly paths to pass to the Code Analysis command line tool."
    },
    "CodeAnalysisDictionary": {
        "description": "Code Analysis custom dictionaries."
    },
    "CodeAnalysisImport": {
        "description": "Code Analysis projects (*.fxcop) or reports to import."
    },
    "COMFileReference": {
        "description": "Type libraries that feed into the ResolvedComreference target.",
        "metadata": {
            "WrapperTool": "The name of the wrapper tool that is used on the component, for example, \"tlbimp.\""
        }
    },
    "Compile": {
        "description": "Source files for compiler",
        "metadata": {
            "AutoGen": "Whether file was generated from another file (boolean)"
        }
    },
    "COMReference": {
        "description": "Reference to a COM component",
        "metadata": {
            "EmbedInteropTypes": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)",
            "Guid": "GUID in the form {00000000-0000-0000-0000-000000000000}",
            "Isolated": "Is it isolated (boolean)",
            "Lcid": "Locale ID",
            "Name": "Friendly display name (optional)",
            "VersionMajor": "Major part of the version number",
            "VersionMinor": "Minor part of the version number",
            "WrapperTool": "Wrapper tool, such as tlbimp"
        }
    },
    "Content": {
        "description": "Files that are not compiled, but may be embedded or published",
        "metadata": {
            "CopyToOutputDirectory": "Copy file to output directory (optional, Always|Newer|Never, default Never)",
            "CopyToPublishDirectory": "Copy file to publish directory (optional, Always|Newer|Never, default Never)",
            "PublishState": "Default, Included, Excluded, DataFile, or Prerequisite"
        }
    },
    "DotNetCliToolReference": {
        "description": "The CLI tool that the user wants restored in the context of the project",
        "metadata": {
            "Version": "The tool version",
            "ExcludeAssets": "Assets to exclude from this reference",
            "IncludeAssets": "Assets to include from this reference",
            "PrivateAssets": "Assets that are private in this reference"
        }
    },
    "EmbeddedResource": {
        "description": "Resources to be embedded in the generated assembly",
        "metadata": {
            "LastGenOutput": "File that was created by any file generator that was run on this item"
        }
    },
    "Folder": {
        "description": "Folder on disk"
    },
    "Import": {
        "description": "Assemblies whose namespaces should be imported by the Visual Basic compiler"
    },
    "NativeReference": {
        "description": "Reference to a native manifest file, or to a file that contains a native manifest",
        "metadata": {
            "HintPath": "Relative path to manifest file",
            "Name": "Base name of manifest file"
        }
    },
    "None": {
        "description": "Files that should have no role in the build process"
    },
    "PackageReference": {
        "description": "Reference to a package",
        "metadata": {
            "Version": "The package version",
            "ExcludeAssets": "Assets to exclude from this reference",
            "IncludeAssets": "Assets to include from this reference",
            "PrivateAssets": "Assets that are private in this reference"
        }
    },
    "Page": {
        "description": "XAML files that are converted to binary and compiled into the assembly"
    },
    "PlatformVersionDescription": {
        "description": "Platform version description. Used to map between internal OS version and marketing OS version.",
        "metadata": {
            "OSVersion": "Internal OS version.",
            "TargetPlatformIdentifier": "Target platform identifier.",
            "TargetPlatformVersion": "Target platform version."
        }
    },
    "PRIResource": {
        "description": "String resources to be indexed in app package's resource index."
    },
    "ProjectCapability": {
        "description": "Project Capability that may activate design-time components in an IDE."
    },
    "ProjectReference": {
        "description": "Reference to another project",
        "metadata": {
            "EmbedInteropTypes": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)",
            "ExcludeAssets": "Assets to exclude from this reference",
            "IncludeAssets": "Assets to include from this reference",
            "Name": "Friendly display name (optional)",
            "OutputItemType": "Item type to emit target outputs into. Default is blank. If the Reference metadata is set to \"true\" (default) then target outputs will become references for the compiler.",
            "PrivateAssets": "Assets that are private in this reference",
            "Project": "Project GUID, in the form {00000000-0000-0000-0000-000000000000}",
            "ReferenceOutputAssembly": "Boolean specifying whether the outputs of the project referenced should be passed to the compiler. Default is true.",
            "SpecificVersion": "Whether the exact version of the assembly should be used.",
            "Targets": "Semicolon separated list of targets in the referenced projects that should be built. Default is the value of $(ProjectReferenceBuildTargets) whose default is blank, indicating the default targets."
        }
    },
    "Reference": {
        "description": "Reference to an assembly",
        "metadata": {
            "Aliases": "Aliases for the reference (optional)",
            "EmbedInteropTypes": "Whether the types in this reference need to embedded into the target assembly - interop assemblies only (optional, boolean)",
            "FusionName": "Fusion name of the assembly (optional)",
            "HintPath": "Relative or absolute path to the assembly (optional)",
            "Name": "Friendly display name (optional)",
            "Private": "Whether the reference should be copied to the output folder (optional, boolean)",
            "RequiredTargetFramework": "The minimum required target framework version in order to use this assembly as a reference",
            "SpecificVersion": "Whether only the version in the fusion name should be referenced (optional, boolean)"
        }
    },
    "Resource": {
        "description": "File that is compiled into the assembly"
    },
    "SDKReference": {
        "description": "Reference to an extension SDK",
        "metadata": {
            "Name": "Friendly display name (optional)"
        }
    },
    "StoreAssociationFile": {
        "description": "A file containing app store association data."
    },
    "StoreManifestSchema": {
        "description": "Store manifest schema file."
    },
    "TargetPlatform": {
        "description": "Target platform in the form of \"Identifier], Version=Version]\", for example, \"Windows, Version=8.0\""
    },
    "WebReferences": {
        "description": "Name of Web References folder to display in user interface"
    },
    "WebReferenceUrl": {
        "description": "Represents a reference to a web service"
    }
}
