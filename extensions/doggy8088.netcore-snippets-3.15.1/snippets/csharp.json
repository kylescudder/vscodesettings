{
	"DbContextOptionsBuilder": {
		"prefix": "ef-dbcontext-options-builder",
		"body": [
			"var ${1:optionsBuilder} = new DbContextOptionsBuilder<${2:ContextName}Context>();",
			"${1}.UseSqlServer(@\"Server=${3:(localdb)\\\\\\\\MSSQLLocalDB};Initial Catalog=${4:DBName};Integrated Security=True\");",
			"// var db = new ${2}Context(${1}.Options)"
		],
		"description": "new DbContextOptionsBuilder() with Connection Strings (Trusted)"
	},
	"DbContextOptionsBuilder-IP": {
		"prefix": "ef-dbcontext-options-builder-ip",
		"body": [
			"var ${1:optionsBuilder} = new DbContextOptionsBuilder<${2:ContextName}Context>();",
			"${1}.UseSqlServer(@\"Server=${3:localhost};Initial Catalog=${4:DBName};User Id=${5:LoginName};Password=${6:Password}\");",
			"// var db = new ${2}Context(${1}.Options)"
		],
		"description": "new DbContextOptionsBuilder() with Connection Strings (IP)"
	},
	"GetConnectionString": {
		"prefix": "nc-get-connstr",
		"body": [
			"// Remember add the following lines to your *.csproj file",
			"// <ItemGroup>",
			"//   <Content Update=\"appsettings.json\">",
			"//     <CopyToOutputDirectory>Always</CopyToOutputDirectory>",
			"//   </Content>",
			"// </ItemGroup>",
			"",
			"var environmentName = Environment.GetEnvironmentVariable (\"ASPNETCORE_ENVIRONMENT\");",
			"",
			"var builder = new Microsoft.Extensions.Configuration.ConfigurationBuilder()",
			"    .SetBasePath (AppContext.BaseDirectory)",
			"    .AddJsonFile (\"appsettings.json\")",
			"    .AddJsonFile ($\"appsettings.{environmentName}.json\", true)",
			"    .AddEnvironmentVariables();",
			"",
			"var config = builder.Build();",
			"",
			"var ${2:connstr} = config.GetConnectionString (\"${1:DefaultConnection}\");",
			"$0"
		],
		"description": "config.GetConnectionString()"
	},
	"Generate GrpcChannel.ForAddress()": {
		"prefix": "grpc-channel",
		"body": [
			"var ${1:channel} = GrpcChannel.ForAddress(\"${2:https://localhost:5001}\");"
		],
		"description": "Generate GrpcChannel.ForAddress()"
	},
	"Generate JwtHelpers class": {
		"prefix": "jwt-helpers",
		"body": [
			"// dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer",
			"using System;",
			"using System.Collections.Generic;",
			"using System.Security.Claims;",
			"using System.Text;",
			"using System.IdentityModel.Tokens.Jwt;",
			"using Microsoft.Extensions.Configuration;",
			"using Microsoft.IdentityModel.Tokens;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\/]+)[\\\\\\/][^\\\\\\/]+$/$1/}}.Helpers",
			"{",
			"    public class JwtHelpers",
			"    {",
			"        private readonly IConfiguration Configuration;",
			"",
			"        public JwtHelpers(IConfiguration configuration)",
			"        {",
			"            this.Configuration = configuration;",
			"        }",
			"",
			"        public string GenerateToken(string userName, int expireMinutes = 30)",
			"        {",
			"            var issuer = Configuration.GetValue<string>(\"JwtSettings:Issuer\");",
			"            var signKey = Configuration.GetValue<string>(\"JwtSettings:SignKey\");",
			"",
			"            // Configuring \"Claims\" to your JWT Token",
			"            var claims = new List<Claim>();",
			"",
			"            // In RFC 7519 (Section#4), there are defined 7 built-in Claims, but we mostly use 2 of them.",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.Iss, issuer));",
			"            claims.Add(new Claim(JwtRegisteredClaimNames.Sub, userName)); // User.Identity.Name",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.Aud, \"The Audience\"));",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.Exp, DateTimeOffset.UtcNow.AddMinutes(30).ToUnixTimeSeconds().ToString()));",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.Nbf, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString())); // 必須為數字",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString())); // 必須為數字",
			"            claims.Add(new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())); // JWT ID",
			"",
			"            // The \"NameId\" claim is usually unnecessary.",
			"            //claims.Add(new Claim(JwtRegisteredClaimNames.NameId, userName));",
			"",
			"            // This Claim can be replaced by JwtRegisteredClaimNames.Sub, so it's redundant.",
			"            //claims.Add(new Claim(ClaimTypes.Name, userName));",
			"",
			"            // TODO: You can define your \"roles\" to your Claims.",
			"            claims.Add(new Claim(\"roles\", \"Admin\"));",
			"            claims.Add(new Claim(\"roles\", \"Users\"));",
			"",
			"            var userClaimsIdentity = new ClaimsIdentity(claims);",
			"",
			"            // Create a SymmetricSecurityKey for JWT Token signatures",
			"            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(signKey));",
			"",
			"            // HmacSha256 MUST be larger than 128 bits, so the key can't be too short. At least 16 and more characters.",
			"            // https://stackoverflow.com/questions/47279947/idx10603-the-algorithm-hs256-requires-the-securitykey-keysize-to-be-greater",
			"            var signingCredentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256Signature);",
			"",
			"            // Create SecurityTokenDescriptor",
			"            var tokenDescriptor = new SecurityTokenDescriptor",
			"            {",
			"                Issuer = issuer,",
			"                //Audience = issuer, // Sometimes you don't have to define Audience.",
			"                //NotBefore = DateTime.Now, // Default is DateTime.Now",
			"                //IssuedAt = DateTime.Now, // Default is DateTime.Now",
			"                Subject = userClaimsIdentity,",
			"                Expires = DateTime.Now.AddMinutes(expireMinutes),",
			"                SigningCredentials = signingCredentials",
			"            };",
			"",
			"            // Generate a JWT securityToken, than get the serialized Token result (string)",
			"            var tokenHandler = new JwtSecurityTokenHandler();",
			"            var securityToken = tokenHandler.CreateToken(tokenDescriptor);",
			"            var serializeToken = tokenHandler.WriteToken(securityToken);",
			"",
			"            return serializeToken;",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Generate JwtHelpers class"
	}
}